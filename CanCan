How to Set Up CanCanCan
Add the Gem: In your Gemfile, add CanCanCan:

gem 'cancancan', '~> 3.3'

bundle install

Generate the Ability Class: The Ability class is where you define all your permissions.
Generate the Ability class using:

	rails g cancan:ability
	
Define Abilities: In the ability.rb file, define the abilities for different user roles. For example:

class Ability
  include CanCan::Ability

  def initialize(user)
    # Define abilities for the passed in user here. For example:
    user ||= User.new # guest user (not logged in)

    if user.admin?
      can :manage, :all
    else
      can :read, :all
      can :create, Post
      can [:update, :destroy], Post, user_id: user.id
    end
  end
end

{...	class PostsController < ApplicationController
	  load_and_authorize_resource(don't use it if you want to show flash messages rather than exception)
	end

	You can handle this in your ApplicationController:

	class ApplicationController < ActionController::Base
	  rescue_from CanCan::AccessDenied do |exception|
	    redirect_to root_url, alert: exception.message
	  end
	end ....}
	
(don't use the upper written code, if you want to show flash messages rather than exception)..

And add this line to application controller while applying the cancancan...
In Controller/applicationController
	
	  include CanCan::ControllerAdditions

when you done,Now if you will want to show any message rather than exception raise than you need to remove 'load_and_authorize_resource' this line from the top of your controller and put 'if can?' condition on the update and destroy action like this..

 def update
    @book = Book.find(params[:id])
    if can?(:update, @book)
    if @book.update(book_params)
      redirect_to @book, notice: "Book was successfully updated."
    else
      render :edit
    end
    else
    redirect_to book_path, notice: "Access denied: You don't have permission to update this post."
    end
  end
  
END..
